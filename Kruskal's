void driver::kruskalsModified(char* out) {
    sort(edges.begin(), edges.end()); //sort edges by their weights
    minEdges.clear();
    string val1 = edges[0].getName1(); //get the first edge
    string val2 = edges[0].getName2();
    set2.makeUnion(val1,val2); //make a union with the first values
    minEdges.push_back(edges[0]); //push back used edge onto the minEdge vector
    for (int x = 1; x < edges.size(); x++) {
        bool check = false;
        string p1 = set2.find(edges[x].getName1()).getParent(); //get the parent of the root of value1's tree
        string p2 = set2.find(edges[x].getName2()).getParent(); //get the parent of the root of value2's tree
            if (p1== p2) { //if the parents are equal, they are in the same tree, so dont make a union out of them
                check = true;
            }

        if (check == false) { //if they are not equal, make union
            set2.makeUnion(edges[x].getName1(), edges[x].getName2());
            minEdges.push_back(edges[x]);
        }
    }

    ofstream output;
    output.open(out);
    //print to file
    if (!output.is_open()) {
        cout << "output file didnt open" << endl;
    }
    double sum = 0;
    output <<"OUTPUT FROM MODIFIED DISJOINT SET" << endl;
    for (int x = 0;  x < minEdges.size(); x++) {
        output << minEdges[x].getName1() << " - " << minEdges[x].getName2() << endl;
        sum += minEdges[x].getWeight();
    }

    output << "Total Weight: " << sum << endl << endl;

}
